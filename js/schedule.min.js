



var aitJ = jQuery.noConflict(true);
(function($) {
	$.cookie = function(a, b, c) {
		
	};

	function Schedule(a, b, c) {
		if (!(this instanceof Schedule)) throw new Error("Constructor called as a function");
		this.container = a;
		this.vuzID = b;
		this.persisted = null;
		this.options = $.extend({}, this.defaultOptions, c);
		if (this.options.isEmployeeMode) {
			$($.proxy(this.initLayoutEmployee, this));
			this.$('.ait-schedlfind-empfac .ait-schedlfind-fac').live('change', $.proxy(this.fillChairedEmployeeDict, this));
			this.$('.ait-schedlfind-empfac .ait-schedlfind-ch').live('change', $.proxy(this.fillEmployeeDict, this));
			this.$('.ait-schedlfind-emp').live('change', $.proxy(this.refreshGoButton, this))
		} else {
			$($.proxy(this.initLayout, this));
			this.$('.ait-schedlfind-sg-filters select').live('change', $.proxy(this.actOnFiltersChanged, this));
			this.$('.ait-schedlfind-sg').live('change', $.proxy(this.actOnStudyGroupChanged, this))
		}
		this.$('.ait-schedlfind-go').live('click', $.proxy(this.requestSchedule, this))
	}
	ait.Schedule = Schedule;
	Schedule.prototype = {
		defaultOptions: {
			isRenderHeader: true,
			isForceTextStyles: true,
			isFullEmployeeName: false,
			textFontSize: 13,
			isEmployeeMode: false,
			isRenderStudyTypeFilter: false,
			isRenderStudyTimePeriod: false,
			renderStudyTimePeriodPosition: 'bottom'
		},
		$: function(a) {
			return $(a, this.container)
		},
		checkCompleteForError: function(a) {
			if (a && a.status == 500) {
				alert('Сталася помилка під час отримання даних!\n' + a.responseText)
			}
		},
		minDatepickerDate: new Date(2000, 0, 1, 0, 0, 0, 0),
		maxDatepickerDate: new Date(2100, 11, 31, 23, 59, 59, 99),
		renderHeader: function(c) {
			if (this.options.isRenderHeader) c.prepend('<div id="block1" class="parent"><h4 class="textStyle textStyle26px">Розклад занять</h4></div>')
		},
		initPickers: function() {
			var e = this.$('.ait-schedlfind-cal1,.ait-schedlfind-cal2'),
				self = this;
			e.datepicker({
				dateFormat: 'dd.mm.yy',
				firstDay: 1,
				dayNamesMin: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Птн', 'Сб'],
				monthNames: ['Січень', 'Лютий', 'Березень', 'Квітень', 'Травень', 'Червень', 'Липень', 'Серпень', 'Вересень', 'Жовтень', 'Листопад', 'Грудень'],
				monthNamesShort: ['Січ', 'Лют', 'Бер', 'Кві', 'Тра', 'Чер', 'Лип', 'Сер', 'Вер', 'Жов', 'Лис', 'Гру'],
				prevText: 'Попередній місяць',
				nextText: 'Наступний місяць',
				showOtherMonths: true,
				selectOtherMonths: true,
				onSelect: function(a) {
					var b = $(this).hasClass("ait-schedlfind-cal1") ? "minDate" : "maxDate",
						defaultShiftOther = $(this).hasClass("ait-schedlfind-cal1") ? 7 : -7,
						instance = $(this).data("datepicker"),
						date = $.datepicker.parseDate(instance.settings.dateFormat, a, instance.settings);
					var c = e.not(this).datepicker("option", b, date);
					if (!c.val()) {
						var d = new Date(date.setDate(date.getDate() + defaultShiftOther));
						c.datepicker("setDate", d)
					}
					self.refreshGoButton();
					return true
				}
			}).live('change', function() {
				var a = $(this).hasClass("ait-schedlfind-cal1") ? "minDate" : "maxDate",
					maxOption = $(this).hasClass("ait-schedlfind-cal1") ? self.minDatepickerDate : self.maxDatepickerDate,
					instance = $(this).data("datepicker"),
					date;
				try {
					date = $.datepicker.parseDate(instance.settings.dateFormat, $(this).val(), instance.settings)
				} catch (err) {
					date = new Date();
					$(this).datepicker('setDate', date)
				}
				if (date) e.not(this).datepicker("option", a, date);
				else e.not(this).datepicker("option", a, maxOption);
				self.refreshGoButton()
			}).datepicker("widget").addClass('ait-schedl-picker');
			e.datepicker('option', 'minDate', self.minDatepickerDate);
			e.datepicker('option', 'maxDate', self.maxDatepickerDate)
		},
		fillPickersWithPersisted: function() {
			if (this.persisted) {
				var a, endDate;
				var b = this.$('.ait-schedlfind-cal1').data('datepicker').settings;
				try {
					a = $.datepicker.parseDate(b.dateFormat, this.persisted.aStartDate, b)
				} catch (err) {
					return
				}
				this.$('.ait-schedlfind-cal1').val(this.persisted.aStartDate);
				this.$('.ait-schedlfind-cal2').datepicker('option', 'minDate', a);
				try {
					endDate = $.datepicker.parseDate(b.dateFormat, this.persisted.aEndDate, b)
				} catch (err) {
					return
				}
				this.$('.ait-schedlfind-cal2').val(this.persisted.aEndDate)
			}
		},
		getForcedFontCSS: function() {
			return '.ait-schedl,.ait-schedl div,.ait-schedl span,.ait-schedl applet,.ait-schedl object,.ait-schedl iframe,.ait-schedl h1,.ait-schedl h2,.ait-schedl h3,.ait-schedl h4,.ait-schedl h5,.ait-schedl h6,.ait-schedl p,.ait-schedl blockquote,.ait-schedl pre,.ait-schedl a,.ait-schedl abbr,.ait-schedl acronym,.ait-schedl address,.ait-schedl big,.ait-schedl cite,.ait-schedl code,.ait-schedl del,.ait-schedl dfn,.ait-schedl em,.ait-schedl font,.ait-schedl img,.ait-schedl ins,.ait-schedl kbd,.ait-schedl q,.ait-schedl s,.ait-schedl samp,.ait-schedl small,.ait-schedl strike,.ait-schedl strong,.ait-schedl sub,.ait-schedl sup,.ait-schedl tt,.ait-schedl var,.ait-schedl b,.ait-schedl u,.ait-schedl i,.ait-schedl center,.ait-schedl dl,.ait-schedl dt,.ait-schedl dd,.ait-schedl ol,.ait-schedl ul,.ait-schedl li,.ait-schedl fieldset,.ait-schedl form,.ait-schedl label,.ait-schedl legend,.ait-schedl table,.ait-schedl caption,.ait-schedl tbody,.ait-schedl tfoot,.ait-schedl thead,.ait-schedl tr,.ait-schedl th,.ait-schedl td, .ait-schedl input, .ait-schedl select { font-size: ' + this.options.textFontSize + 'px !important; font-family: Arial, sans-serif, "MS Sans Serif"; } ' + '.ait-schedl .ait-schedlfind-indent { width: ' + (this.options.textFontSize * 9) + 'px !important; } ' + '.ait-schedl .ait-schedlfind-fac { width: ' + Math.floor(this.options.textFontSize * 11.42) + 'px !important; } ' + '.ait-schedl-picker { font-size: ' + this.options.textFontSize + 'px !important; font-family: Arial, sans-serif, "MS Sans Serif"; } ' + '.ait-schedl .ait-schedlfind-cal1,.ait-schedl .ait-schedlfind-cal2 { width: ' + (this.options.textFontSize * 14) + 'px !important; } ' + '.ait-schedl .ait-schedlfind-stypes { width: ' + (this.options.textFontSize * 14 + 5) + 'px !important; } ' + '.ait-schedl .ait-schedlfind-rem {left: ' + (this.options.textFontSize * 44) + 'px !important;} ' + '.ait-schedl .ait-schedl-footer,.ait-schedl .ait-schedl-footer a { font-size: 0.8em !important; }'
		},
		getRemarkHTML: function(a, b) {
			return '<div class="" id="page-feed"><div class="ait-schedlfind-rem ait-schedlfind-' + a + '">; виберіть ' + b + '</div>'
		},
		getSelectHTML: function(a, b) {
			return '<div class="container">'
				+'<div class="select-box">'
					+'<select class=" full option selected ait-schedlfind-' + a + '">'
					+'<option value="">--(виберіть ' + b + ')--</option></select>'
				+'</div>'
			+'</div>'
		},
		getClearHTML: function() {
			return '<div class="ait-schedlfind-clear"/>'
		},
		getStudyTypesHTML: function() {
			return '<div class="cards dateFL buttonAllW"><div class="ait-schedlfind-block ait-schedlfind-stypes-block" id="block2"><div class="ait-schedlfind-indent">Тип занять: </div>'
			
			+'<div class="container">'
			+'<div class="select-box">'
				+ '<select class="full option selected ait-schedlfind-stypes"><option value="">Всі</option></select></div>'
			+'</div>'
			+'</div>'+'</div>'
		},
		getGoHTML: function() {
			return '<div id="block3" ><button id="marr"class="marB buttonAllW cards dateFL textStyle18px ait-schedlfind-go" disabled="disabled" onclick="myFunction1() ">Вивести</button></div>'
	
		},
		minifyRemarks: function() {
			if (this.$('.ait-schedlfind-rem').width() < 100) {
				this.$('.ait-schedlfind-rem').html('&nbsp;&larr;&nbsp;&larr;')
			}
		},
		getPickersAndGoHTML: function() {
			return this.getClearHTML() + this.getRemarkHTML('date-remark', 'дати') 
			+'<div class="ait-schedlfind-datepickers" id="block4">'
			+'<div class="cards dateP">'
				+'<div class="cards dateFL dateW">'
				+'<div class="ait-schedlfind-indent">Дата від </div>'
				+'<input type="button" id="all_date_s" class=" textStyle textStyle14pxB inp_data ait-schedlfind-cal1" value="" />'
				+'</div>'

				+'<div class="cards dateFR dateW">'
				+'<div class="ait-schedlfind-indent">Дата по </div>'
				+'<input type="button" id="all_date_e" class="textStyle textStyle14pxB inp_data ait-schedlfind-cal2" value="" />'
				+'</div>'
			+'</div>'
				/*+'<button onclick="mydate0()">day</button>'
				+'<button onclick="mydate1()">7 day</button>'
				+'<button onclick="mydate2()">місяць</button>'*/
					+ this.getClearHTML() 
					+ (this.options.isRenderStudyTypeFilter ? this.getStudyTypesHTML() : '') 
					+ this.getGoHTML() 
			+'</div>'
		},
		getPersistName: function() {
			return this.options.isEmployeeMode ? 'ait-schedl-emp' : 'ait-schedl'
		},
		initLayout: function() {
			var c = $(this.container);
			if (c.length !== 1) throw new Error("No correct schedule container found");
			c.addClass('ait-schedl');
			if (this.options.isForceTextStyles) $('head').append('');
			this.renderHeader(c);
			if (!this.options.studyGroupId) {
				c.append('<p class="ait-schedlfind-remark"></p>' 
				+ this.getRemarkHTML('filters-remark', 'будь-який') 
				+ '<div class="cards" id="block5"><div class="ait-schedlfind-sg-filters"><div class="ait-schedlfind-indent">Фільтри: </div>' 
				+ this.getSelectHTML('fac', 'факультет') 
				+ this.getSelectHTML('edu', 'форму навчання') 
				+ this.getSelectHTML('cour', 'курс') 
				+ '</div></div>' + this.getClearHTML() 
				+ this.getRemarkHTML('sg-remark', 'групу') 
				+ '<div class="cards" id="block6"><div class="ait-schedlfind-sg-block"><div class="ait-schedlfind-indent">Навчальна група: </div>' 
				+ this.getSelectHTML('sg', 'групу') + '</div></div>');
				this.$('.ait-schedlfind-sg').attr('disabled', 'disabled')
			}
			c.append(this.getPickersAndGoHTML());
			this.initGeneralAreas();
			this.fillStudentDicts()
		},
		initLayoutEmployee: function() {
			var c = $(this.container);
			if (c.length !== 1) throw new Error("No correct schedule container found");
			c.addClass('ait-schedl');
			if (this.options.isForceTextStyles) $('head').append('<style type="text/css">' + this.getForcedFontCSS() + '.ait-schedl .ait-schedlfind-empfac .ait-schedlfind-fac { width: ' + Math.floor(this.options.textFontSize * 14) + 'px !important; } ' + '.ait-schedl .ait-schedlfind-ch { width: ' + Math.floor(this.options.textFontSize * 14) + 'px !important; } ' + '.ait-schedl .ait-schedlfind-emp { width: ' + Math.floor(this.options.textFontSize * 14) + 'px !important; } ' + '</style>');
			this.renderHeader(c);
			c.append('<p class="ait-schedlfind-remark">Виберіть співробітника та дату або діапазон дат для перегляду розкладу</p>' + this.getRemarkHTML('empfac-remark', 'факультет') + '<div class="ait-schedlfind-block ait-schedlfind-empfac"><div class="ait-schedlfind-indent">Факультет: </div>' + this.getSelectHTML('fac', 'факультет') + '&nbsp;&nbsp;&nbsp;&nbsp;Кафедра: &nbsp;&nbsp;' + this.getSelectHTML('ch', 'кафедру') + '</div>' + this.getClearHTML() + this.getRemarkHTML('emp-remark', 'співр-ка') + '<div class="ait-schedlfind-block ait-schedlfind-empblock"><div class="ait-schedlfind-indent">Співробітник: </div>' + this.getSelectHTML('emp', 'співробітника') + '</div>' + this.getPickersAndGoHTML());
			this.$('.ait-schedlfind-ch,.ait-schedlfind-emp').attr('disabled', 'disabled');
			this.initGeneralAreas();
			this.fillEmployeeDicts()
		},
		initGeneralAreas: function() {
			this.minifyRemarks();
			this.initPickers();
			this.persisted = JSON.parse(localStorage.getItem(this.getPersistName()));
			this.fillPickersWithPersisted()
		},
		fillSelector: function(a, b) {
			var c = "";
			a.forEach(function(d) {
				c += "<option value='" + d.Key + "'>" + d.Value + "</option>"
			});
			this.$(b).append(c)
		},
		prepareForGetJson: function(b) {
			var c = {};
			$(Object.keys(b)).each(function(i) {
				var a = this,
					v = b[a];
				if (typeof v === 'boolean') c[a] = v;
				else if (!v) c[a] = null;
				else if (typeof v == "string") c[a] = '"' + v + '"';
				else c[a] = v
			});
			return c
		},
		fillEmployeeDicts: function() {
			this.$('.ait-schedlfind-remark').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
			$.ajax({
				type: "GET",
				dataType: "json",
				url: ait.service_base + '/BetaSchedule.asmx/GetEmployeeFaculties?callback=?',
				data: {
					aVuzID: this.vuzID
				},
				success: $.proxy(this.fillEmployeeDictsSuccess, this),
				complete: this.checkCompleteForError
			})
		},
		fillEmployeeDictsSuccess: function(a) {
			this.$('.ait-schedlfind-remark .wait').remove();
			if (!a.d) {
				alert('unexpected error');
				return
			}
			this.fillSelector(a.d, '.ait-schedlfind-fac');
			if (this.persisted) {
				this.$('.ait-schedlfind-fac').val(this.persisted.aFacultyID);
				this.fillChairedEmployeeDict()
			}
		},
		fillStudentDicts: function() {
			if (this.options.studyGroupId) {
				this.requestSchedule();
				this.refreshGoButton();
				if (this.options.isRenderStudyTypeFilter) {
					this.$('.ait-schedlfind-stypes-block').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
					$.ajax({
						type: "GET",
						dataType: "json",
						url: ait.service_base + '/BetaSchedule.asmx/GetStudyTypesSeparate?callback=?',
						data: {
							aVuzID: this.vuzID
						},
						success: $.proxy(this.fillStudyTypesSeparateSuccess, this),
						complete: this.checkCompleteForError
					})
				}
				return
			}
			this.$('.ait-schedlfind-remark').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
			$.ajax({
				type: "GET",
				dataType: "json",
				url: ait.service_base + '/BetaSchedule.asmx/GetStudentScheduleFiltersData?callback=?',
				data: {
					aVuzID: this.vuzID
				},
				success: $.proxy(this.fillStudentDictsSuccess, this),
				complete: this.checkCompleteForError
			})
		},
		fillStudyTypesSeparateSuccess: function(a) {
			this.$('.ait-schedlfind-stypes-block .wait').remove();
			if (!a.d) {
				alert('unexpected error');
				return
			}
			this.$('.ait-schedlfind-stypes option').not('[value=]').remove();
			this.fillSelector(a.d, '.ait-schedlfind-stypes')
		},
		actOnFiltersChanged: function() {
			this.fillStudyGroupsDict();
			if (!(this.persisted && this.persisted.aStudyGroupID)) this.fillMessage();
			this.persistData()
		},
		actOnStudyGroupChanged: function() {
			this.refreshGoButton();
			this.fillMessage();
			this.persistData()
		},
		persistData: function() {
			var a = {
				aVuzID: this.vuzID,
				aFacultyID: this.$('.ait-schedlfind-fac').val(),
			};
			if (this.options.isEmployeeMode) {
				a = $.extend(a, {
					aChairID: this.$('.ait-schedlfind-ch').val(),
					aEmployeeID: this.$('.ait-schedlfind-emp').val(),
					aStartDate: this.$('.ait-schedlfind-cal1').val(),
					aEndDate: this.$('.ait-schedlfind-cal2').val(),
					aStudyTypeID: this.$('.ait-schedlfind-stypes').val() || ''
				})
			} else {
				a = $.extend(a, {
					aEducationForm: this.$('.ait-schedlfind-edu').val(),
					aCourse: this.$('.ait-schedlfind-cour').val(),
					aStudyGroupID: this.$('.ait-schedlfind-sg').val(),
					aStartDate: this.$('.ait-schedlfind-cal1').val(),
					aEndDate: this.$('.ait-schedlfind-cal2').val(),
					aStudyTypeID: this.$('.ait-schedlfind-stypes').val() || ''
				})
			}
			localStorage.setItem(this.getPersistName(), JSON.stringify(a))
		},
		getDataToPersist: function() {
			return this.options.isEmployeeMode ? $.extend({}, this.getEmployeeRequestData(), this.getScheduleRequestData()) : $.extend({}, this.getStudyGroupDictRequestData(), this.getScheduleRequestData())
		},
		fillStudentDictsSuccess: function(a) {
			this.$('.ait-schedlfind-remark .wait').remove();
			if (!a.d || !a.d.faculties || !a.d.educForms || !a.d.courses) {
				alert('unexpected error');
				return
			}
			this.fillSelector(a.d.faculties, '.ait-schedlfind-fac');
			this.fillSelector(a.d.educForms, '.ait-schedlfind-edu');
			this.fillSelector(a.d.courses, '.ait-schedlfind-cour');
			if (this.persisted) {
				this.$('.ait-schedlfind-fac').val(this.persisted.aFacultyID);
				this.$('.ait-schedlfind-edu').val(this.persisted.aEducationForm);
				this.$('.ait-schedlfind-cour').val(this.persisted.aCourse);
				this.actOnFiltersChanged()
			}
		},
		getStudyGroupDictRequestData: function() {
			return {
				aVuzID: this.vuzID,
				aFacultyID: this.$('.ait-schedlfind-fac').val(),
				aEducationForm: this.$('.ait-schedlfind-edu').val(),
				aCourse: this.$('.ait-schedlfind-cour').val(),
				aGiveStudyTimes: this.options.isRenderStudyTypeFilter
			}
		},
		getMessageRequestData: function() {
			if (this.options.studyGroupId) return {
				aVuzID: this.vuzID,
				aFacultyID: null,
				aEducationForm: null,
				aCourse: null,
				aStudyGroupID: this.options.studyGroupId
			};
			else return {
				aVuzID: this.vuzID,
				aFacultyID: this.$('.ait-schedlfind-fac').val(),
				aEducationForm: this.$('.ait-schedlfind-edu').val(),
				aCourse: this.$('.ait-schedlfind-cour').val(),
				aStudyGroupID: this.$('.ait-schedlfind-sg').val()
			}
		},
		getChairedEmployeeDictRequestData: function() {
			return {
				aVuzID: this.vuzID,
				aFacultyID: this.$('.ait-schedlfind-fac').val(),
				aGiveStudyTimes: this.options.isRenderStudyTypeFilter
			}
		},
		getEmployeeRequestData: function() {
			return {
				aVuzID: this.vuzID,
				aFacultyID: this.$('.ait-schedlfind-fac').val(),
				aChairID: this.$('.ait-schedlfind-ch').val()
			}
		},
		fillMessage: function() {
			var a = this.getMessageRequestData();
			$.ajax({
				type: "GET",
				dataType: "json",
				url: ait.service_base + '/BetaSchedule.asmx/GetMessage?callback=?',
				data: this.prepareForGetJson(a),
				cache: false,
				success: $.proxy(this.fillMessageSuccess, this),
				complete: this.checkCompleteForError
			})
		},
		fillMessageSuccess: function(a) {
			this.renderMessage(a.d)
		},
		fillChairedEmployeeDict: function() {
			this.$('.ait-schedlfind-ch option,.ait-schedlfind-emp option').not('[value=]').remove();
			var a = this.getChairedEmployeeDictRequestData();
			if (!a.aFacultyID) {
				this.$('.ait-schedlfind-ch,.ait-schedlfind-emp').attr('disabled', 'disabled');
				this.$('.ait-schedlfind-empfac-remark').fadeIn();
				this.refreshGoButton()
			} else {
				this.$('.ait-schedlfind-empblock').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
				$.ajax({
					type: "GET",
					dataType: "json",
					url: ait.service_base + '/BetaSchedule.asmx/GetEmployeeChairs?callback=?',
					data: this.prepareForGetJson(a),
					cache: false,
					success: $.proxy(this.fillChairedEmployeeDictSuccess, this),
					complete: this.checkCompleteForError
				})
			}
		},
		fillChairedEmployeeDictSuccess: function(a) {
			this.$('.ait-schedlfind-empblock .wait').remove();
			if (!a.d || !a.d.chairs || !a.d.employees || (this.options.isRenderStudyTypeFilter && !a.d.studyTypes)) {
				alert('unexpected error');
				return
			}
			this.$('.ait-schedlfind-ch,.ait-schedlfind-emp').removeAttr('disabled');
			this.$('.ait-schedlfind-empfac-remark').fadeOut();
			this.fillSelector(a.d.chairs, '.ait-schedlfind-ch');
			this.fillSelector(a.d.employees, '.ait-schedlfind-emp');
			if (this.options.isRenderStudyTypeFilter) {
				this.$('.ait-schedlfind-stypes option').not('[value=]').remove();
				this.fillSelector(a.d.studyTypes, '.ait-schedlfind-stypes')
			}
			if (this.persisted) {
				this.$('.ait-schedlfind-ch').val(this.persisted.aChairID);
				this.$('.ait-schedlfind-emp').val(this.persisted.aEmployeeID);
				this.requestSchedule()
			}
			this.refreshGoButton()
		},
		fillEmployeeDict: function() {
			this.$('.ait-schedlfind-emp option').not('[value=]').remove();
			var a = this.getEmployeeRequestData();
			if (!a.aFacultyID) {
				this.refreshGoButton()
			} else {
				this.$('.ait-schedlfind-empblock').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
				$.ajax({
					type: "GET",
					dataType: "json",
					url: ait.service_base + '/BetaSchedule.asmx/GetEmployees?callback=?',
					data: this.prepareForGetJson(a),
					cache: false,
					success: $.proxy(this.fillEmployeeDictSuccess, this),
					complete: this.checkCompleteForError
				})
			}
		},
		fillEmployeeDictSuccess: function(a) {
			this.$('.ait-schedlfind-empblock .wait').remove();
			if (!a.d) {
				alert('unexpected error');
				return
			}
			this.$('.ait-schedlfind-emp').removeAttr('disabled');
			this.fillSelector(a.d, '.ait-schedlfind-emp');
			if (this.persisted) {
				this.$('.ait-schedlfind-emp').val(this.persisted.aEmployeeID);
				this.requestSchedule()
			}
			this.refreshGoButton()
		},
		fillStudyGroupsDict: function() {
			this.$('.ait-schedlfind-sg option').not('[value=]').remove();
			var a = this.getStudyGroupDictRequestData();
			if (!a.aFacultyID && !a.aEducationForm && !a.aCourse) {
				this.$('.ait-schedlfind-sg').attr('disabled', 'disabled');
				this.$('.ait-schedlfind-filters-remark').fadeIn();
				this.refreshGoButton()
			} else {
				this.$('.ait-schedlfind-sg-block').append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
				$.ajax({
					type: "GET",
					dataType: "json",
					url: ait.service_base + '/BetaSchedule.asmx/GetStudyGroups?callback=?',
					data: this.prepareForGetJson(a),
					cache: false,
					success: $.proxy(this.fillStudyGroupsDictSuccess, this),
					complete: this.checkCompleteForError
				})
			}
		},
		fillStudyGroupsDictSuccess: function(a) {
			this.$('.ait-schedlfind-sg-block .wait').remove();
			if (!a.d || !a.d.studyGroups || (this.options.isRenderStudyTypeFilter && !a.d.studyTypes)) {
				alert('unexpected error');
				return
			}
			this.$('.ait-schedlfind-sg').removeAttr('disabled');
			this.$('.ait-schedlfind-filters-remark').fadeOut();
			this.fillSelector(a.d.studyGroups, '.ait-schedlfind-sg');
			if (this.options.isRenderStudyTypeFilter) {
				this.$('.ait-schedlfind-stypes option').not('[value=]').remove();
				this.fillSelector(a.d.studyTypes, '.ait-schedlfind-stypes')
			}
			if (this.persisted) {
				this.$('.ait-schedlfind-sg').val(this.persisted.aStudyGroupID);
				this.fillMessage();
				this.requestSchedule()
			}
			this.refreshGoButton()
		},
		getStudentScheduleRequestData: function() {
			var a = this.$('.ait-schedlfind-cal1').val(),
				endDate = this.$('.ait-schedlfind-cal2').val(),
				sgID = this.options.studyGroupId || this.$('.ait-schedlfind-sg').val(),
				stypeID = this.$('.ait-schedlfind-stypes').val() || '';
			if (!this.options.studyGroupId) {
				if (!sgID) this.$('.ait-schedlfind-sg-remark').fadeIn();
				else this.$('.ait-schedlfind-sg-remark').fadeOut()
			}
			if (!a || !endDate) this.$('.ait-schedlfind-date-remark').fadeIn();
			else this.$('.ait-schedlfind-date-remark').fadeOut();
			if (!a || !endDate || !sgID) return null;
			else return {
				aVuzID: this.vuzID,
				aStudyGroupID: sgID,
				aStartDate: a,
				aEndDate: endDate,
				aStudyTypeID: stypeID
			}
		},
		getEmployeeScheduleRequestData: function() {
			var a = this.$('.ait-schedlfind-cal1').val(),
				endDate = this.$('.ait-schedlfind-cal2').val(),
				empID = this.$('.ait-schedlfind-emp').val(),
				stypeID = this.$('.ait-schedlfind-stypes').val() || '';
			if (!empID) this.$('.ait-schedlfind-emp-remark').fadeIn();
			else this.$('.ait-schedlfind-emp-remark').fadeOut();
			if (!a || !endDate) this.$('.ait-schedlfind-date-remark').fadeIn();
			else this.$('.ait-schedlfind-date-remark').fadeOut();
			if (!a || !endDate || !empID) return null;
			else return {
				aVuzID: this.vuzID,
				aEmployeeID: empID,
				aStartDate: a,
				aEndDate: endDate,
				aStudyTypeID: stypeID
			}
		},
		getScheduleRequestData: function() {
			return this.options.isEmployeeMode ? this.getEmployeeScheduleRequestData() : this.getStudentScheduleRequestData()
		},
		refreshGoButton: function() {
			if (!this.getScheduleRequestData()) {
				this.$('.ait-schedlfind-go').attr('disabled', 'disabled')
			} else {
				this.$('.ait-schedlfind-go').removeAttr('disabled')
			}
		},
		requestSchedule: function(b) {
			if (b) b.preventDefault();
			var c = $(this.container),
				reqData = this.getScheduleRequestData();
			this.persistData();
			if (!reqData) return false;
			c.append('<img class="wait" src="./images/Magnify.gif" alt="Зачекайте, будь-лакска..." />');
			$.ajax({
				type: "GET",
				dataType: "json",
				url: ait.service_base + '/BetaSchedule.asmx/GetScheduleData' + (this.options.isEmployeeMode ? 'Emp' : 'X') + '?callback=?',
				data: this.prepareForGetJson(reqData),
				cache: false,
				success: $.proxy(function(a) {
					if (!a.d) {
						alert('unexpected error');
						return
					}
					c.find('img.wait').remove();
					this.$('.ait-schedl-container,.ait-schedl-footer').remove();
					this.renderScheduleFromData(a.d)
				}, this),
				complete: this.checkCompleteForError
			})
		},
		shortenPIB: function(a) {
			return a.split(' ')[0] + ' ' + $.makeArray($(a.split(' ').slice(1)).map(function() {
				return this.charAt(0) + '.'
			})).join('')
		},
		renderMessage: function(a, b) {
			this.hasMessage = !b && a;
			this.$('.ait-schedl-msg').remove();
			if (!a) return;
			var c = $('<div/>', {
				"class": 'ait-schedl-msg' + (b ? ' ait-schedl-empty' : ''),
				text: a
			});
			if (this.$('.ait-schedl-container').length) this.$('.ait-schedl-container').before(c);
			else $(this.container).append(c)
		},
		renderScheduleFromData: function(b) {
			if (!this.hasMessage && b.length == 0) {
				this.renderMessage('На жаль, для вибраного діапазону дані відсутні.', true);
				return
			}
			var h = "",
				self = this;
				
			h += '<div id="block7" class="ait-schedl-container">';
			h += '<div  class="" id="page-home"><h3 class="parent textStyle textStyle26px">' + this.$('.ait-schedlfind-sg option:selected').text() + '</h3>'
			;
			h += '<table class="tab">'
			+'<thead>'
			+'	 <th>День</th>'
			+'	 <th>Розклад</th>'
			+'</thead><tbody>'

			
			var c = "",
				curTime = "",
				rDate = 0,
				rTime = 0;
			$(b).each(function() {
				h +='<tr>';
				if (this.full_date !== c) {
					if (h.indexOf('%rDate%') >= 0) h = h.replace('%rDate%', rDate);
					h += '<td class="day" rowspan=%rDate%>' + this.week_day
						+'	<span>'+ this.full_date +'</span>'
						+'</td>'
					c = this.full_date;
					rDate = 0;
					curTime = ""
				}
				if (this.study_time !== curTime) {
					if (h.indexOf('%rTime%') >= 0) h = h.replace('%rTime%', rTime);
					var a = self.options.isRenderStudyTimePeriod ? ((self.options.renderStudyTimePeriodPosition == 'bottom' ? '<br/>' : '') + ' <span>' + this.study_time_begin + '–' + this.study_time_end + '</span>') : "";
					h += '<td rowspan=%rTime%>'
					
					+'<div class="cards">'
					+'	<h3 class="textStyle textStyle18px">'+ this.discipline +'</h3>'
					+'	<div class="textStyle textStyle14px dop doc">'
					+'		<div class="time dopLine">'+ this.study_time_begin +'</div>'
					+'		<div class="type ">'+ (this.study_subgroup || '&nbsp;')  +'</div>'
					+'	</div>'
					+'	<div class="textStyle textStyle14px dop">'
					+'		<div class="aud">'+ (this.cabinet || '&nbsp;') +'</div>'
					+'	</div>'
					+'	<div class="textStyle textStyle14px dop">'
					+'		<div class="grup">'+ (this.study_type || '&nbsp;')  +'</div>'
					+'		<div class="pre">'+ this.employee +'</div>'
					+'	</div>'
					+'</div>';

					curTime = this.study_time;
					rTime = 0
				}
				rDate++;
				rTime++;
			
				h += '</tr>'
			});
			if (h.indexOf('%rTime%') >= 0) h = h.replace('%rTime%', rTime);
			if (h.indexOf('%rDate%') >= 0) h = h.replace('%rDate%', rDate);
			h += '</tbody></table>';
			h += "</div><br/><div class='textStyle textStyle14px parent ait-schedl-footer'id='block8'>Розклад створено за допомогою <a href='http://vuz.osvita.net/ua/' target='_blank'>АСК «ВНЗ»</a><br/>&copy; <a href='http://ndipit.com.ua/' target='_blank'>ПрАТ «НДІ ПІТ»</a>, 2012-2020</div></div>";
			$(this.container).append(h);
			this.$('.ait-schedl-container th.ait-schedl-nextdate').closest('tr').slice(1).find('td').addClass('ait-schedl-topcell')


			
		}
	}
})(aitJ);